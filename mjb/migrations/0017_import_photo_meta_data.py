# Generated by Django 3.1.5 on 2021-02-13 17:52
import unittest
import requests

from django.db import migrations
from django.db.models import Q

import django.test

from SiteMJB import settings
from mjb.models import Photographie

EXEMPLE_PETIT = "83A-musique-Contrebasse_1-8_MG-vignette.jpg"
EXEMPLE = "83A-musique-Contrebasse_1_8_MG.jpg"

def get_meta_data(nom_fichier):
    url = settings.RACINE_IMAGES + nom_fichier
    req = requests.get(url)
    if req.status_code != 200:
        return False, False

    url = settings.RACINE_IMAGES + Photographie.fichier_vignette(nom_fichier)
    req = requests.get(url)
    if req.status_code != 200:
        return True, False

    return True, True


def import_meta_data(photo):
    image_ok, vignette_ok = get_meta_data(photo.nom_fichier)
    Photographie.objects.filter(id=photo.id).update(image_ok=image_ok, vignette_ok=vignette_ok)
    return image_ok, vignette_ok


class Migration(migrations.Migration):
    dependencies = [
        ('mjb', '0016_ajout_image_vignette_ok'),
    ]

    def import_meta_data(apps, schema_editor):
        i = 0
        photographie = apps.get_model('mjb', 'Photographie')
        for photo in photographie.objects.filter(Q(image_ok=None) | Q(vignette_ok=None)):
            if i % 50 == 0:
                print()
                print('%d ' % i, end='', flush=True)
            f, v = import_meta_data(photo)
            print('x' if not f else '-' if not v else '.', end='', flush=True)
            i = i+1
        print()
        print("%d photos vérifées" % i)

    operations = [
        # migrations.RunPython(import_meta_data),
    ]


class MappingsTestCaseWithDB(django.test.TestCase):

    def setUp(self):
        self.photo = Photographie.objects.create(nom_fichier=EXEMPLE_PETIT)

    def test_import_meta_data(self):
        import_meta_data(self.photo)
        self.photo.refresh_from_db()
        self.assertTrue(self.photo.image_ok)
        self.assertFalse(self.photo.vignette_ok)


class UtilsTestCase(unittest.TestCase):
    def test_get_meta_data_404(self):
        self.assertEqual((False, False), get_meta_data("unknown"))

    def test_get_meta_data_existant(self):
        self.assertEqual((True, True), get_meta_data(EXEMPLE))

    def test_get_meta_data_existant_petit(self):
        self.assertEqual((True, False), get_meta_data(EXEMPLE_PETIT))